{
  "title": "Deploy Steps",
  "steps": [
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 58,
      "description": "Buckle up kids, there are a lot of parameters to Cover"
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 63,
      "description": "You'll see the `[ArgumentCompleter()]` used a lot in this module. There's the potential for a vast amount of items here, and discovering them, while doable via some of the other cmdlets available in this module, is just a little easier if we grab the names of _all_ the deployments the server has, and allow you to tab through them."
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 66,
      "description": "$r here holds all the names that come back from `Get-CCMDeployment -All`"
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 70,
      "description": "Using a `.Where()` method with a regex `-match` operator lets you tab through things more easily. For example, you can start typing Up, hit tab, and the first match will autocomplete (_think upgrade in this Up example)."
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 82,
      "description": "This parameter will be the name of the step as shown in the Web UI of CCM."
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 104,
      "description": "Again, this offers a tab completed list of all of the groups available to deploy too in CCM"
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 108,
      "description": "'14400' here is 4 hours for the less-inclined to do math"
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 112,
      "description": "If it errors, fail the deployment step. I'm being a terrible human and forcing a switch to be $true as a default value, instead of the normal $false.  This is because $true is the default behavior in the Web UI."
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 140,
      "description": "Advanced Deployment steps accept a Scriptblock. This can be any arbitrary PowerShell code you want. If you load modules inside of your code you just need to ensure that the module being referenced is available to the client computer. Perhaps in a previous step you use an advanced step to perform `Install-Module` from an internal module repository for example. "
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 144,
      "description": "All cmdlets in this module check for the presence of a `$Session` variable which stores a cookie that is generated by the `Connect-CCMServer` cmdlet. "
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 150,
      "description": "Here we begin to setup the payload for `Invoke-RestMethod`"
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 151,
      "description": "This is the payload of a basic step"
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 166,
      "description": "And this is advanced. You'll noticed we pass our Scriptblock `.ToString()`, which when converted to JSON will have the proper `\\n` characters etc that is valid JSON."
    },
    {
      "file": "src/Public/New-CCMDeploymentStep.ps1",
      "line": 190,
      "description": "We then execute our payload against the CCM instance, and catch any errors."
    }
  ],
  "ref": "master"
}